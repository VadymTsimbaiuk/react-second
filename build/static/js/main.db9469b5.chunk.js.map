{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","mainFeaturesPost","position","color","palette","common","white","marginBottom","backgroundSize","backgroundRepeat","backgroundPosition","mainFeaturesPostContent","padding","marginTop","overlay","top","bottom","right","left","backgroundOverlay","cardMedia","paddingTop","cardContent","cardGrid","cards","App","classes","React","useState","value","setValue","open","setOpen","handleClose","AppBar","Container","fixed","Toolbar","IconButton","edge","aria-label","className","Typography","variant","Box","mr","Button","onClick","Dialog","onClose","arial-lablledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","DialogActions","Paper","style","backgroundImage","Grid","container","item","md","component","gutterBottom","paragraph","mainContent","maxWidth","align","mainButtons","justify","map","card","key","xs","sm","Card","CardMedia","image","CardContent","CardActions","size","BottomNavigation","onChange","event","newValue","BottomNavigationAction","icon","cariant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db9469b5.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n  AppBar, Container, Toolbar, IconButton,\n  Typography, Box, Paper, Grid, CardMedia,\n  CardContent, CardActions, Card, BottomNavigation,\n  BottomNavigationAction,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions, DialogContentText\n} from '@material-ui/core';\n\n\n\n\nimport FolderIcon from '@material-ui/icons/Folder';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LayerIcon from '@material-ui/icons/Layers';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(1)\n  },\n  title: {\n    flexGrow: 1\n  },\n  mainFeaturesPost: {\n    position: \"relative\",\n    color: theme.palette.common.white,\n    marginBottom: theme.spacing(4),\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\"\n  },\n  mainFeaturesPostContent: {\n    position: \"relative\",\n    padding: theme.spacing(6),\n    marginTop: theme.spacing(8)\n  },\n  overlay: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    backgroundOverlay: \"rgba(0,0,0,.3)\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\"\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  cardGrid: {\n    marginTop: theme.spacing(4)\n  }\n}))\n\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nfunction App() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(\"recents\")\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  }\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n\n\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Container fixed>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton}>\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>WEb DEv</Typography>\n            <Box mr={3}>\n              <Button color=\"inherit\" variant=\"outlined\" onClick={handleClickOpen}>Log in</Button>\n              <Dialog open={open} onClose={handleClose} arial-lablledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Log in</DialogTitle>\n                <DialogContent>\n                  <DialogContentText>Log in to see photo</DialogContentText>\n                  <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    label=\"Email addres\"\n                    type=\"email\"\n                    fullWidth\n                  />\n\n                  <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"pass\"\n                    label=\"Password\"\n                    type=\"password\"\n                    fullWidth\n                  />\n\n                </DialogContent>\n                <DialogActions>\n                  <Button onClick={handleClose} color=\"primary\">Cansel</Button>\n                  <Button onClick={handleClose} color=\"primary\">Log in</Button>\n                </DialogActions>\n              </Dialog>\n\n\n            </Box>\n            <Button color=\"secondary\" variant=\"contained\">Sign up</Button>\n          </Toolbar>\n        </Container>\n      </AppBar>\n\n      <main>\n        <Paper className={classes.mainFeaturesPost} style={{ backgroundImage: `url(https://source.unsplash.com/random)` }}>\n          <Container fixed>\n            <div className={classes.overlay} />\n            < Grid container>\n              <Grid item md={6}>\n                <div className={classes.mainFeaturesPostContent}>\n                  <Typography\n                    component=\"h1\"\n                    variant=\"h3\"\n                    color=\"inherit\"\n                    gutterBottom\n                  >\n                    Web dev blog\n                  </Typography>\n                  <Typography\n                    component=\"h5\"\n                    color=\"inherit\"\n                    paragraph\n                  >\n                    Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя\n                  </Typography>\n                  <Button variant=\"contained\" color=\"secondary\">\n                    Leearn more\n                  </Button>\n                </div>\n              </Grid>\n            </Grid>\n          </Container>\n        </Paper>\n        <div className={classes.mainContent}>\n          <Container maxWidth=\"md\">\n            <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Some different words\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя\n            </Typography>\n            <div className={classes.mainButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">Start now</Button>\n\n                </Grid>\n                <Grid item>\n\n                  <Button variant=\"outlined\" color=\"primary\">Learn more</Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image=\"https://source.unsplash.com/random\"\n                    title=\"Image title\"\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography variant=\"h5\" gutterBottom>\n                      Blog Post\n                    </Typography>\n                    <Typography>\n                      Blog Post. test message from. Blog Post.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      View\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Edit\n                    </Button>\n\n                    <LayerIcon />\n                    <PlayCircleFilledIcon />\n                  </CardActions>\n                </Card>\n\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      <footer>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom >Footer</Typography>\n        <BottomNavigation\n          value={value}\n          onChange={handleChange}\n          className={classes.root}\n        >\n          <BottomNavigationAction\n            label=\"Recets\"\n            value=\"recents\"\n            icon={<RestoreIcon />}\n\n          />\n          <BottomNavigationAction\n            label=\"Favorites\"\n            value=\"favorites\"\n            icon={<FavoriteIcon />}\n\n          />\n          <BottomNavigationAction\n            label=\"Nearby\"\n            value=\"nearby\"\n            icon={<LocationOnIcon />}\n\n          />\n          <BottomNavigationAction\n            label=\"Folder\"\n            value=\"folder\"\n            icon={<FolderIcon />}\n\n          />\n        </BottomNavigation>\n        <Typography align=\"center\" color=\"textSecondary\" component=\"p\" cariant=\"subtitle1\">\n          Web developer blog react JS material ui site\n        </Typography>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}